; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "movieServer"
#define MyAppVersion "1.0"
#define MyAppPublisher "scoTown"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{AC69629F-306D-4A4A-AE15-ADDB4F33931C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
; Uncomment the following line to run in non administrative install mode (install for current user only).
;PrivilegesRequired=lowest
OutputBaseFilename=mysetup
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "C:\Users\scott\Desktop\testDeploy\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Code]
var
  InputPage: TInputQueryWizardPage;
  User: string;
  Password: string;
  Port: string;

procedure InitializeWizard;
begin
  // Create a custom input page after the Welcome page
  InputPage := CreateInputQueryPage(
    wpWelcome,
    'User Input Required',
    'Enter Required Information',
    'Please enter the following details:'
  );

  // Add input fields
  InputPage.Add('DB username:', False);
  InputPage.Add('DB password:', False);
  InputPage.Add('DB port:', False);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if CurPageID = InputPage.ID then
  begin
  //put loop here
    User := InputPage.Values[0];
    Password := InputPage.Values[1];
    Port := InputPage.Values[2];
    if (User = '') and (Password = '') and (Port = '')  then
    begin
      MsgBox('All feilds cant be empty', mbError, MB_OK);
      Result := False;
    end
    else
    begin
      Result := True;
    end;
  end
  else
    Result := True;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    SaveStringToFile(ExpandConstant('{app}\config.csv'), ('User,'+'password,'+'port'+ #13#10
          + User + ',' + Password + ',' + Port) , False);
  end;
end;

[Run]
Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File ""{app}\script.ps1"""; Flags: nowait

